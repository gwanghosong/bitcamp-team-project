<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
<mapper namespace="com.eomcs.lms.dao.MemberDao">

  <resultMap type="member" id="memberMap">
    <id column="mbr_id" property="no" />
    <result column="user_id" property="id" />
    <result column="pwd" property="password" />
    <result column="name" property="name" />
    <result column="bth_dt" property="birthDay" />
    <result column="gndr" property="gender" />
    <result column="tel" property="tel" />
    <result column="email" property="email" />
    <result column="post" property="post" />
    <result column="bas_addr" property="baseAddress" />
    <result column="det_addr" property="detailAddress" />
    <result column="prof_phot" property="photo" />
    <result column="s_intd" property="selfIntroduce" />
    <result column="login_type" property="loginType" />
    <result column="stat" property="status" />
    <result column="cdt" property="createdDate" />
    <result column="lcd" property="latestDate" />
    <result column="mgr" property="manager" />
    <result column="main_tm_id" property="mainTeam" />

  </resultMap>
  
  <sql id="select1">  
  Select 
    s.name,
    t.tlead_wth
  from
    mbr m 
    left outer join tm_mbr t on m.mbr_id = t.mbr_id
    left outer join tm s on t.tm_mbr_id = s.tm_id 
  where
    m.mbr_id = #{value};
  </sql>
  
  
  <sql id="default-columns">
      mbr_id, 
      name, 
      user_id,
      email, 
      tel,
      cdt
  </sql>
  
  <select id="findAll" resultMap="memberMap">
    select 
      <include refid="default-columns"/>
    from 
      mbr
    order by 
      name asc
  </select>
  
  <select id="findByNo" resultMap="memberMap" parameterType="int">
    select 
      mbr_id,
      name,
      bth_dt,
      gndr, 
      prof_phot,
      email,
      user_id,
      pwd,
      tel,
      post,
      bas_addr,
      det_addr,
      login_type,
      s_intd
    from 
      mbr
    where 
      mbr_id = #{value}
  </select>
  
  
  <select id="findByEmail" resultMap="memberMap" parameterType="string">
    select
      <include refid="default-columns"/>,
      mgr,
      prof_phot,
      login_type,
      main_tm_id
    from 
      mbr
    where 
      email = #{value}
  </select>
  
    <select id="findById" resultMap="memberMap" parameterType="string">
    select
      mbr_id, 
      user_id
    from 
      mbr
    where 
      user_id = #{value}
  </select>
  
  <select id="findByIdPassword" resultMap="memberMap" parameterType="map">
    select 
      <include refid="default-columns"/>,
      mgr,
      prof_phot,
      login_type,
      main_tm_id
    from 
      mbr
    where 
      user_id = #{id}
      and pwd = password(#{password})
  </select>
  
    <select id="findByPassword" resultMap="memberMap" parameterType="member">
    select 
      mbr_id, 
      name, 
      email, 
      tel,
      cdt
    from 
      mbr
    where 
      user_id = #{id}
      and pwd = password(#{password})
  </select>
  
  <select id="findByNameWithEmail" resultMap="memberMap" parameterType="member">
    select 
      user_id,
      login_type
    from 
      mbr
    where 
      name = #{name}
      and email = #{email}
  </select>

  <select id="findByKeyword" resultMap="memberMap" parameterType="string">
    <bind name="pattern1" value="'%' + _parameter + '%'"/>
    select 
      <include refid="default-columns"/> 
    from 
      mbr
    where 
      name like #{pattern1}
      or email like #{pattern1}
      or tel like #{pattern1}
    order by name asc
  </select>
  
  <insert id="insert" parameterType="member"
    useGeneratedKeys="true" keyColumn="mbr_id" keyProperty="no">
    insert into mbr(
      user_id,
      pwd,
      name,
      email,
      login_type
      ) values(
      #{id},
      password(#{password}),
      #{name},
      #{email},
      #{loginType}
      )
  </insert>
  
  <update id="update" parameterType="member">
    update mbr
    <set>
      <if test="name != null">name = #{name},</if>
      <if test="email != null">email = #{email},</if>
      <if test="tel != null">tel = #{tel},</if>
      <if test="post != null">post = #{post},</if>
      <if test="baseAddress != null">bas_addr = #{baseAddress},</if>
      <if test="detailAddress != null">det_addr = #{detailAddress},</if>
      <if test="selfIntroduce != null">s_intd = #{selfIntroduce},</if>
      <if test="photo != null">prof_phot = #{photo}</if> 
    </set>  
    where 
      mbr_id = #{no}
  </update>
  
    <update id="updatePassword" parameterType="member">
    update mbr
    set
    pwd = password(#{password})
    where 
    mbr_id = #{no}
  </update>
  
  <update id="updateOption" parameterType="member">
    update mbr
    <set>
      bth_dt = #{birthDay},
      gndr = #{gender},
      tel = #{tel},
      post = #{post},
      bas_addr = #{baseAddress},
      <if test="photo != null and photo != ''">prof_phot = #{photo},</if>
      <if test="detailAddress != null and detailAddress != ''">det_addr = #{detailAddress},</if>
      <if test="selfIntroduce != null and selfIntroduce != ''">s_intd = #{selfIntroduce}</if>
    </set>  
    where 
      mbr_id = #{no}
  </update>
  
  <delete id="delete" parameterType="int">
    delete from mbr 
    where mbr_id = #{value}
  </delete>
</mapper>










